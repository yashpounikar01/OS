#include <stdio.h>
// Function to find the waiting time for all processes in Round Robin
void findWaitingTime(int processes[], int n, int bt[], int wt[], int quantum)
{
    int remainingTime[n];
    for (int i = 0; i < n; i++)
    {
        remainingTime[i] = bt[i];
        wt[i] = 0;
    }
    int t = 0; // Current time
    while (1)
    {
        int done = 1; // Indicates whether all processes are done
        // Traverse all processes
        for (int i = 0; i < n; i++)
        {
            // If burst time is greater than 0, this process is not done
            if (remainingTime[i] > 0)
            {
                done = 0; // There is still a pending process
                // Execute the process for the minimum of quantum and
                // remaining burst time
                int executeTime = (remainingTime[i] > quantum) ? quantum : remainingTime[i];
                remainingTime[i] -= executeTime;
                t += executeTime; // Update current time
                // Calculate waiting time
                wt[i] += t - executeTime;
            }
        }
        // If all processes are done, exit the loop
        if (done == 1)
            break;
    }
}
// Function to calculate turn around time
void findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[])
{
    for (int i = 0; i < n; i++)
    {
        tat[i] = bt[i] + wt[i];
    }
}
// Function to calculate average time
void findAvgTime(int processes[], int n, int bt[], int at[], int quantum)
{
    int wt[n], tat[n];
    findWaitingTime(processes, n, bt, wt, quantum);
    findTurnAroundTime(processes, n, bt, wt, tat);
    float total_wt = 0, total_tat = 0;
    for (int i = 0; i < n; i++)
    {
        total_wt += wt[i];
        total_tat += tat[i];
    }
printf("Processes Arrival time Burst time Waiting time Turnaround time\n");
for (int i = 0; i < n; i++) {
        printf(" %d ", processes[i]);
        printf(" %d ", at[i]);
        printf(" %d ", bt[i]);
        printf(" %d", wt[i]);
        printf(" %d\n", tat[i]);
}
float s = (float)total_wt / (float)n;
float t = (float)total_tat / (float)n;
printf("Average waiting time = %f", s);
printf("\n");
printf("Average turnaround time = %f ", t);
}
int main()
{
    int n, quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    int processes[n], burstTime[n], arrivalTime[n];
    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++)
    {
        printf("Process %d:\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &arrivalTime[i]);
        printf("Burst Time: ");
        scanf("%d", &burstTime[i]);
        processes[i] = i + 1; // Assign process IDs
    }
    printf("Enter the time quantum: ");
    scanf("%d", &quantum);
    findAvgTime(processes, n, burstTime, arrivalTime, quantum);
    return 0;
}